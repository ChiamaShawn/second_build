{"version":3,"sources":["webpack:///./node_modules/@ckeditor/ckeditor5-angular/fesm5/ckeditor-ckeditor5-angular.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACgF;AAClE;AACiB;;AAEhE;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,qBAAqB,sDAAQ,GAAG,gBAAgB,0DAA0D;AAC1G;AACA,2BAA2B,EAAE;AAC7B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,kCAAkC,6BAA6B;AAC/D,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,iCAAiC,6BAA6B;AAC9D,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA,qCAAqC,gEAAiB;AACtD,yCAAyC,gEAAU;AACnD,wCAAwC;AACxC;AACA,yCAAyC,0BAA0B,EAAE;AACrE;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oDAAoD;AACpD,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,oDAAM;AACtB,MAAM;AACN;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,iBAAiB,OAAO,oDAAM,EAAE;AAChC,kBAAkB,OAAO,oDAAM,EAAE;AACjC,gBAAgB,OAAO,oDAAM,EAAE;AAC/B,iBAAiB,OAAO,oDAAM,EAAE;AAChC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,0DAAW,EAAE,4DAAY;AACvD;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE6C;;AAE7C,sD","file":"default~subtopic-subtopic-module~teacher-dash-teacher-dash-module.js","sourcesContent":["import { __assign } from 'tslib';\nimport { Component, Input, Output, NgZone, EventEmitter, forwardRef, ElementRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * Basic typings for the CKEditor5 elements.\n */\nvar CKEditor5;\n(function (CKEditor5) {\n    /**\n     * The CKEditor5 editor constructor.\n     * @record\n     */\n    function EditorConstructor() { }\n    CKEditor5.EditorConstructor = EditorConstructor;\n    /**\n     * The CKEditor5 editor config.\n     * @record\n     */\n    function Config() { }\n    CKEditor5.Config = Config;\n    /**\n     * The event object passed to CKEditor5 event callbacks.\n     *\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_eventinfo-EventInfo.html\n     * @record\n     * @template EventName\n     */\n    function EventInfo() { }\n    CKEditor5.EventInfo = EventInfo;\n    /**\n     * The base Editor class.\n     *\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n     * @record\n     */\n    function BaseEditor() { }\n    CKEditor5.BaseEditor = BaseEditor;\n    /**\n     * The CKEditor5 DataApi interface.\n     *\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html.\n     * @record\n     */\n    function DataApi() { }\n    CKEditor5.DataApi = DataApi;\n    /**\n     * A CKEditor5 editor that implements the\n     * [DataApi interface](https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html).\n     * E.g. the `ClassicEditor`, `InlineEditor`, etc.\n     * @record\n     */\n    function Editor() { }\n    CKEditor5.Editor = Editor;\n})(CKEditor5 || (CKEditor5 = {}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar CKEditorComponent = /** @class */ (function () {\n    function CKEditorComponent(elementRef, ngZone) {\n        /**\n         * The configuration of the editor.\n         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n         * to learn more.\n         */\n        this.config = {};\n        /**\n         * The initial data of the editor. Useful when not using the ngModel.\n         * See https://angular.io/api/forms/NgModel to learn more.\n         */\n        this.data = '';\n        /**\n         * Tag name of the editor component.\n         *\n         * The default tag is 'div'.\n         */\n        this.tagName = 'div';\n        /**\n         * Fires when the editor is ready. It corresponds with the `editor#ready`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n         * event.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n         * event.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n         * event.\n         */\n        this.blur = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n         * event.\n         */\n        this.focus = new EventEmitter();\n        /**\n         * The instance of the editor created by this component.\n         */\n        this.editorInstance = null;\n        /**\n         * If the component is read–only before the editor instance is created, it remembers that state,\n         * so the editor can become read–only once it is ready.\n         */\n        this.initialIsDisabled = false;\n        this.ngZone = ngZone;\n        this.elementRef = elementRef;\n    }\n    Object.defineProperty(CKEditorComponent.prototype, \"disabled\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this.editorInstance) {\n                return this.editorInstance.isReadOnly;\n            }\n            return this.initialIsDisabled;\n        },\n        /**\n         * When set `true`, the editor becomes read-only.\n         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n         * to learn more.\n         */\n        set: /**\n         * When set `true`, the editor becomes read-only.\n         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n         * to learn more.\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) {\n            this.setDisabledState(isDisabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Implementing the AfterViewInit interface.\n    // Implementing the AfterViewInit interface.\n    /**\n     * @return {?}\n     */\n    CKEditorComponent.prototype.ngAfterViewInit = \n    // Implementing the AfterViewInit interface.\n    /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            _this.createEditor();\n        }));\n    };\n    // Implementing the OnDestroy interface.\n    // Implementing the OnDestroy interface.\n    /**\n     * @return {?}\n     */\n    CKEditorComponent.prototype.ngOnDestroy = \n    // Implementing the OnDestroy interface.\n    /**\n     * @return {?}\n     */\n    function () {\n        if (this.editorInstance) {\n            this.editorInstance.destroy();\n            this.editorInstance = null;\n        }\n    };\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CKEditorComponent.prototype.writeValue = \n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        // This method is called with the `null` value when the form resets.\n        // A component's responsibility is to restore to the initial state.\n        if (value === null) {\n            value = '';\n        }\n        // If already initialized.\n        if (this.editorInstance) {\n            this.editorInstance.setData(value);\n        }\n        // If not, wait for it to be ready; store the data.\n        else {\n            this.data = value;\n            // If the editor element is already available, then update its content.\n            // If the ngModel is used then the editor element should be updated directly here.\n            if (this.editorElement) {\n                this.editorElement.innerHTML = this.data;\n            }\n        }\n    };\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    CKEditorComponent.prototype.registerOnChange = \n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        this.cvaOnChange = callback;\n    };\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    CKEditorComponent.prototype.registerOnTouched = \n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        this.cvaOnTouched = callback;\n    };\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CKEditorComponent.prototype.setDisabledState = \n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        // If already initialized\n        if (this.editorInstance) {\n            this.editorInstance.isReadOnly = isDisabled;\n        }\n        // If not, wait for it to be ready; store the state.\n        else {\n            this.initialIsDisabled = isDisabled;\n        }\n    };\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     */\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     * @private\n     * @return {?}\n     */\n    CKEditorComponent.prototype.createEditor = /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var element = document.createElement(this.tagName);\n        this.editorElement = element;\n        if (this.data && this.config.initialData) {\n            throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n        }\n        // Merge two possible ways of providing data into the `config.initialData` field.\n        /** @type {?} */\n        var config = __assign({}, this.config, { initialData: this.config.initialData || this.data || '' });\n        this.elementRef.nativeElement.appendChild(element);\n        return (/** @type {?} */ (this.editor)).create(element, config)\n            .then((/**\n         * @param {?} editor\n         * @return {?}\n         */\n        function (editor) {\n            _this.editorInstance = editor;\n            if (_this.initialIsDisabled) {\n                editor.isReadOnly = _this.initialIsDisabled;\n            }\n            _this.ngZone.run((/**\n             * @return {?}\n             */\n            function () {\n                _this.ready.emit(editor);\n            }));\n            _this.setUpEditorEvents(editor);\n        }))\n            .catch((/**\n         * @param {?} err\n         * @return {?}\n         */\n        function (err) {\n            console.error(err.stack);\n        }));\n    };\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     */\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     * @private\n     * @param {?} editor\n     * @return {?}\n     */\n    CKEditorComponent.prototype.setUpEditorEvents = /**\n     * Integrates the editor with the component by attaching related event listeners.\n     * @private\n     * @param {?} editor\n     * @return {?}\n     */\n    function (editor) {\n        var _this = this;\n        /** @type {?} */\n        var modelDocument = editor.model.document;\n        /** @type {?} */\n        var viewDocument = editor.editing.view.document;\n        modelDocument.on('change:data', (/**\n         * @param {?} evt\n         * @return {?}\n         */\n        function (evt) {\n            _this.ngZone.run((/**\n             * @return {?}\n             */\n            function () {\n                if (_this.cvaOnChange) {\n                    /** @type {?} */\n                    var data = editor.getData();\n                    _this.cvaOnChange(data);\n                }\n                _this.change.emit({ event: evt, editor: editor });\n            }));\n        }));\n        viewDocument.on('focus', (/**\n         * @param {?} evt\n         * @return {?}\n         */\n        function (evt) {\n            _this.ngZone.run((/**\n             * @return {?}\n             */\n            function () {\n                _this.focus.emit({ event: evt, editor: editor });\n            }));\n        }));\n        viewDocument.on('blur', (/**\n         * @param {?} evt\n         * @return {?}\n         */\n        function (evt) {\n            _this.ngZone.run((/**\n             * @return {?}\n             */\n            function () {\n                if (_this.cvaOnTouched) {\n                    _this.cvaOnTouched();\n                }\n                _this.blur.emit({ event: evt, editor: editor });\n            }));\n        }));\n    };\n    CKEditorComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ckeditor',\n                    template: '<ng-template></ng-template>',\n                    // Integration with @angular/forms.\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef((/**\n                             * @return {?}\n                             */\n                            function () { return CKEditorComponent; })),\n                            multi: true,\n                        }\n                    ]\n                }] }\n    ];\n    /** @nocollapse */\n    CKEditorComponent.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone }\n    ]; };\n    CKEditorComponent.propDecorators = {\n        editor: [{ type: Input }],\n        config: [{ type: Input }],\n        data: [{ type: Input }],\n        tagName: [{ type: Input }],\n        disabled: [{ type: Input }],\n        ready: [{ type: Output }],\n        change: [{ type: Output }],\n        blur: [{ type: Output }],\n        focus: [{ type: Output }]\n    };\n    return CKEditorComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar CKEditorModule = /** @class */ (function () {\n    function CKEditorModule() {\n    }\n    CKEditorModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [FormsModule, CommonModule],\n                    declarations: [CKEditorComponent],\n                    exports: [CKEditorComponent]\n                },] }\n    ];\n    return CKEditorModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CKEditorComponent, CKEditorModule };\n\n//# sourceMappingURL=ckeditor-ckeditor5-angular.js.map"],"sourceRoot":""}